#!/usr/bin/env python
"""
Link an exposure in the local archive to the specified output directory.
"""
import os,sys
import logging
import argparse
import subprocess
import numpy as np
import time

from archive.parser import VerboseAction, Parser
from archive import DIRNAME,BASENAME,BASEDIR
from archive import local

def parser():
    parser = Parser(description=__doc__)
    parser.add_argument('--outdir',default=BASEDIR,
                        help='directory of local archive')
    parser.add_argument('--logdir',nargs='?',default=None,const='.',
                        help='directory for log files.')
    parser.add_argument('-n','--njobs',type=int,default=10,
                        help='number of jobs to run concurrently')
    parser.add_argument('-s','--sleep',type=float,default=0,
                        help='time between submissions')
    return parser

if __name__ == "__main__":
    args = parser().parse_args()

    logging.info("Loading full inventory...")
    inv_all = local.get_inventory()

    logging.info("Loading output inventory...")
    inv = local.get_inventory(args.outdir)

    # Exposures that are not in output directory
    sel = ~np.in1d(inv_all['expnum'],inv['expnum'])
    if sel.sum() == 0:
        logging.info("No exposures to fill.")

    files = inv_all['filename'][sel]
    nites = inv_all['nite'][sel]
    _,idx = np.unique(nites,return_index=True)

    logdir = args.logdir
    if logdir and not os.path.exists(logdir): 
        os.makedirs(logdir)

    num = len(idx)
    for i,(filename,nite) in enumerate(zip(files[idx],nites[idx])):

        dirname = os.path.dirname(filename)
        outdir = os.path.join(args.outdir,DIRNAME)
        outdir = outdir.format(nite=nite)

        if not os.path.exists(outdir) and not args.dryrun:
            os.makedirs(outdir)

        # Build the command
        info = '({:>{width}}/{}): '.format(i+1,num,width=len(str(num)))
        
        log = '-o %s '%os.path.join(logdir,'%s.log'%nite) if logdir else ''
        njobs = '-n %s '%(args.njobs) if args.njobs else ''

        sub = 'csub {njobs} {log}'.format(njobs=njobs,log=log)

        cmd = '"ln -s {}/*.fits.fz {}"'.format(dirname,outdir)

        logging.info(info + sub + cmd)
        if not args.dryrun: subprocess.call(sub+cmd,shell=True)    

        time.sleep(args.sleep)

    logging.info('Done.')

