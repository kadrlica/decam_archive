#!/usr/bin/env python
"""
Fill the archive with exposures released on a given nite.
"""
import os,sys
import logging
import argparse
import subprocess
import datetime
from dateutil.parser import parse as dateparse
import numpy as np
import time

from archive.parser import VerboseAction, Parser
from archive.sispi import expnum2nite
from archive import BASEDIR,DIRNAME,BASENAME
from archive import local,noao,noirlab
from archive.utils import mkdir

def parser():
    parser = Parser(description=__doc__)
    parser.add_argument('-d','--date',type=int,
                        default=int(datetime.date.today().strftime('%Y%m%d')),
                        help='release date')
    parser.add_argument('--outdir',default=BASEDIR,
                        help='directory of local archive')
    parser.add_argument('--logdir',nargs='?',default=None,const='.',
                        help='directory for log files.')
    parser.add_argument('-s','--sleep',type=float,default=1,
                        help='time between submissions')
    parser.add_argument('-n','--njobs',type=int,default=5,
                        help='number of simultaneous jobs')
    parser.add_argument('-q','--queue',default='vanilla',
                        help='queue to submit')
    parser.add_argument('-p','--propid',default=None,
                        help='propid to select')
    return parser
   

if __name__ == "__main__":
    args = parser().parse_args()

    tstart = str(args.date)
    tstop  = (dateparse(tstart) + datetime.timedelta(1)).strftime('%Y%m%d')

    logging.info("Release period: %s -- %s..."%(tstart,tstop))

    query=noirlab.get_query(tstart=tstart,tstop=tstop,propid=args.propid)

    dirname = mkdir('./table')
    table = os.path.join(dirname,'night_%s.npy'%tstart)
    logging.info("Creating %s..."%table)
    noirlab.download_table(table,query=query)
    data = np.load(table)

    if not len(data):
        logging.info("No data returned by query; exiting...")
        sys.exit()
    else:
        logging.info("NITES: %s"%(np.unique(data['nite'])))
        logging.info("EXPNUMS: %i - %i"%(data['expnum'].min(),data['expnum'].max()))
        logging.info("NEXP: %i"%len(data))

    logdir = args.logdir
    if logdir: mkdir(logdir)

    # Get all exposures in the inventory
    logging.debug("Loading local inventory...")
    inv = local.get_inventory()
    sel = ~np.in1d(data['expnum'],inv['expnum'])
    sel &= ~np.in1d(data['expnum'],noao.BLACKLIST)
    num = sel.sum()

    if not num:
        logging.info("No new exposures found; exiting...")
        sys.exit()

    for i,d in enumerate(data[sel]):
        expnum = d['expnum']
        outfile = os.path.join(args.outdir,DIRNAME,BASENAME)
        outfile = outfile.format(nite=expnum2nite(expnum),expnum=expnum)

        if os.path.exists(outfile):
            msg = "Found %s; skipping..."%os.path.basename(outfile)
            logging.info(msg)
            continue

        outdir = mkdir(os.path.dirname(outfile))

        # Build the command
        info = '({:>{width}}/{}): '.format(i,num,width=len(str(num)))

        log = '-o %s '%os.path.join(logdir,'%s.log'%expnum) if logdir else ''
        njobs = '-n %s '%args.njobs
        sub = 'csub -q {queue} {njobs} {log}'.format(queue=args.queue,njobs=njobs,log=log)

        cmd = 'get_exposure --link %s %s --table %s'%(expnum,outfile,table)

        logging.info(info + sub + cmd)
        if not args.dryrun: subprocess.call(sub+cmd,shell=True)    

        time.sleep(args.sleep)
