#!/usr/bin/env python
"""
Link an exposure in the local archive to the specified output directory.
"""
import os,sys
import logging
import argparse
import subprocess
import numpy as np
import time
import pandas as pd

from archive.parser import VerboseAction, Parser
from archive import BASEDIR,DIRNAME,BASENAME
from archive import local
from archive.sispi import SISPI

def parser():
    parser = Parser(description=__doc__)
    parser.add_argument('--outdir',default=BASEDIR,
                        help='directory of local archive')
    parser.add_argument('--logdir',nargs='?',default=None,const='.',
                        help='directory for log files.')
    parser.add_argument('-c','--chunk',type=int,default=5000,
                        help='number of exposures per chunk')
    parser.add_argument('-s','--sleep',type=float,default=0,
                        help='time between submissions')
    return parser

if __name__ == "__main__":
    args = parser().parse_args()

    chunk = args.chunk
    if chunk > 5e4:
        msg = "'chunk' too large: %d"%chunk
        raise OverflowError(msg)

    logging.info("Loading inventory...")
    inv = local.get_inventory(args.outdir)
    num = len(inv['expnum'])

    sispi = SISPI()

    i = 0
    count = 0
    while i < num:
        # Build the command
        info = '({:>{width}}/{}): '.format(i,num,width=len(str(num)))
        logging.info(info)

        df_local = pd.DataFrame(inv[i:i+chunk])
        df_sispi = pd.DataFrame(sispi.get_date(df_local['expnum']))
        df_merge = df_local.merge(df_sispi,on='expnum',
                                  suffixes=('_local','_sispi'))

        sel = (df_merge['nite_local']!=df_merge['nite_sispi'])
        count += sel.sum()
        if np.any(sel):
            df = df_merge[sel]
            for row in df.itertuples():
                infile = row.filename
                outfile = os.path.join(args.outdir,DIRNAME,BASENAME) 
                outfile = outfile.format(nite=row.nite_sispi,expnum=row.expnum)
                outdir = os.path.dirname(outfile)

                # This shouldn't happen....
                #if infile == outfile: continue

                cmd = 'mv {} {}'.format(infile,outfile)
                logging.debug(cmd)
                if not args.dryrun:
                    if not os.path.exists(outdir):
                        os.makedirs(outdir)
                    subprocess.call(cmd,shell=True)

        i += chunk
