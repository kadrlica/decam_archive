#!/usr/bin/env python
"""
Fill the archive with all accessible exposures.
"""
import os,sys
import logging
import argparse
import subprocess
import datetime
import numpy as np
import time

from archive.parser import VerboseAction, Parser
from archive.sispi import expnum2nite
from archive import BASEDIR,DIRNAME,BASENAME
from archive import local,noao
from archive.utils import mkdir

def parser():
    parser = Parser(description=__doc__)
    parser.add_argument('--outdir',default=BASEDIR,
                        help='directory of local archive')
    parser.add_argument('--logdir',nargs='?',default=None,const='.',
                        help='directory for log files.')
    parser.add_argument('--explist',
                        help='list of exposures to download')
    parser.add_argument('--votable',
                        help='NOAO inventory table')
    parser.add_argument('--tstart',default=None,type=int,
                        help="start date (i.e., '20110101')")
    parser.add_argument('--tstop',default=None,type=int,
                        help="stop date (i.e., '20200101')")
    parser.add_argument('-a','--archive', default='all',
                        choices=['local','desar2','noao','all'],
                        help='source archive')
    parser.add_argument('-s','--sleep',type=float,default=1,
                        help='time between submissions')
    parser.add_argument('--njobs',type=int,default=5,
                        help='number of simultaneous jobs')
    parser.add_argument('-c','--cert',default=None,
                        help='path to certificate')
    return parser
   

if __name__ == "__main__":
    args = parser().parse_args()

    votable = args.votable

    if not votable:
        vodir = mkdir('./votable')
        today = datetime.date.today().strftime("%Y%m%d")
        votable = os.path.join(vodir,'noao_monthly_%s.vot'%today)

    if not os.path.exists(votable):
        logging.info("Downloading NOAO inventory...")
        logging.info("Writing %s..."%votable)
        noao.download_votable(votable)
        npyfile = votable.replace('.vot','.npy')
        logging.info("Writing %s..."%npyfile)
        np.save(npyfile,noao.load_votable(votable))
        votable = npyfile
    else:
        logging.info("Using existing votable: %s"%votable)

    explist = args.explist
    if not explist: explist = votable

    if explist.endswith('.vot'):
        data = noao.load_votable(explist)
    elif explist.endswith('.npy'):
        data = np.load(explist)
    elif explist.endswith('.csv'):
        data = np.recfromcsv(explist)
    elif explist.endswith(('.txt','.dat')):
        data = np.recfromtxt(explist)
    else:
        msg = "Unrecognized file type: %s"%(os.path.splitext(extlist)[-1])
        raise ValueError(msg)

    logdir = args.logdir
    if logdir: mkdir(logdir)

    # Get all exposures in the inventory
    inv = local.get_inventory()
    sel = ~np.in1d(data['expnum'],inv['expnum'])
    sel &= ~np.in1d(data['expnum'],noao.BLACKLIST)

    num = sel.sum()

    if not num:
        logging.info("No new exposures found; exiting...")
        sys.exit()

    for i,d in enumerate(data[sel]):
        expnum = d['expnum']
        nite = expnum2nite(expnum)
        outfile = os.path.join(args.outdir,DIRNAME,BASENAME)
        outfile = outfile.format(nite=nite,expnum=expnum)

        if os.path.exists(outfile):
            msg = "Found %s; skipping..."%os.path.basename(outfile)
            logging.info(msg)
            continue

        outdir = mkdir(os.path.dirname(outfile))

        # Build the command
        info = '({:>{width}}/{}): '.format(i+1,num,width=len(str(num)))


        log = '-o %s'%os.path.join(logdir,'%s.log'%expnum) if logdir else ''
        njobs = '-n %s'%args.njobs if args.njobs else ''
        sub = 'csub {njobs} {log} '.format(njobs=njobs,log=log)
        certificate = '--cert %s'%args.cert if args.cert else ''        
        cmd = 'get_exposure --link %s %s --votable %s %s'%(expnum,outfile,votable,
                                                        certificate)

        logging.info(info + sub + cmd)
        if not args.dryrun: subprocess.call(sub+cmd,shell=True)    

        time.sleep(args.sleep)

    logging.info('Done.')
