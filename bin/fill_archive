#!/usr/bin/env python
"""
Fill the archive with all accessible exposures.
"""
import os,sys
import logging
import argparse
import subprocess
import datetime
import numpy as np
import time

from archive.parser import VerboseAction, Parser
from archive.sispi import expnum2nite
from archive import BASEDIR,DIRNAME,BASENAME
from archive import local,noao,noirlab
from archive.utils import mkdir

def parser():
    parser = Parser(description=__doc__)
    parser.add_argument('--outdir',default=BASEDIR,
                        help='directory of local archive')
    parser.add_argument('--logdir',nargs='?',default=None,const='.',
                        help='directory for log files.')
    parser.add_argument('--explist',
                        help='list of exposures to download')
    parser.add_argument('--table',
                        help='Exposure inventory table')
    parser.add_argument('--tstart',default=20121101,type=int,
                        help="release date start (i.e., 20121101)")
    parser.add_argument('--tstop',default=None,type=int,
                        help="release date stop (i.e., 20200101)")
    parser.add_argument('-p','--propid',default=None,
                        help='propid to select')
    parser.add_argument('--exptime',default=30,type=float,
                        help='minimum exposure time (s)')
    # DEPRECATED: 2021-07-11
    #parser.add_argument('-a','--archive', default='all',
    #                    choices=['local','desar2','noao','noirlab','all'],
    #                    help='source archive')
    parser.add_argument('-s','--sleep',type=float,default=1,
                        help='time between submissions')
    parser.add_argument('--njobs',type=int,default=5,
                        help='number of simultaneous jobs')
    parser.add_argument('-q','--queue',default='vanilla',
                        help='queue to submit')
    return parser
   

if __name__ == "__main__":
    args = parser().parse_args()

    table = args.table

    if not table:
        dirname = mkdir('./table')
        today = datetime.date.today().strftime("%Y%m%d")
        table = os.path.join(dirname,'archive_%s.npy'%today)

    #if not os.path.exists(table):
    #    logging.info("Using existing table: %s"%table)

    logging.info("Downloading exposure inventory...")
    logging.info("Writing %s..."%table)
    noirlab.download_table(table,tstart=args.tstart,tstop=args.tstop,
                        propid=args.propid,exptime=args.exptime)

    explist = args.explist
    if not explist: explist = table

    if explist.endswith('.npy'):
        data = np.load(explist)
    elif explist.endswith('.csv'):
        data = np.recfromcsv(explist)
    elif explist.endswith(('.txt','.dat')):
        data = np.recfromtxt(explist)
    elif explist.endswith('.vot'):
        data = noao.load_votable(explist)
    else:
        msg = "Unrecognized file type: %s"%(os.path.splitext(extlist)[-1])
        raise ValueError(msg)

    logdir = args.logdir
    if logdir: mkdir(logdir)

    # Get all exposures in the inventory
    inv = local.get_inventory()
    sel = ~np.in1d(data['expnum'],inv['expnum'])
    sel &= ~np.in1d(data['expnum'],noao.BLACKLIST)

    num = sel.sum()

    if not num:
        logging.info("No new exposures found; exiting...")
        sys.exit()

    for i,d in enumerate(data[sel]):
        expnum = d['expnum']
        nite = expnum2nite(expnum)
        outfile = os.path.join(args.outdir,DIRNAME,BASENAME)
        outfile = outfile.format(nite=nite,expnum=expnum)

        if os.path.exists(outfile):
            msg = "Found %s; skipping..."%os.path.basename(outfile)
            logging.info(msg)
            continue

        outdir = mkdir(os.path.dirname(outfile))

        # Build the command
        info = '({:>{width}}/{}): '.format(i+1,num,width=len(str(num)))

        log = '-o %s '%os.path.join(logdir,'DECam_%08d.log'%expnum) if logdir else ''
        njobs = '-n %s '%args.njobs if args.njobs else ''
        sub = 'csub -q {queue} {njobs} {log}'.format(queue=args.queue,njobs=njobs,log=log)
        
        cmd = 'get_exposure --link %s %s --table %s'%(expnum,outfile,table)

        logging.info(info + sub + cmd)
        if not args.dryrun: subprocess.call(sub+cmd,shell=True)    

        time.sleep(args.sleep)

    logging.info('Done.')
